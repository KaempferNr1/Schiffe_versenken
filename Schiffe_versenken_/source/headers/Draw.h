#pragma once
//#include <vector>
//#include <iostream>
//#include <string>
//#include <Windows.h>
#include "player.h"
//#include "computer.h"
#include "Compare.h"
#include "global.h"


class Draw
{
	//std::vector< std::vector < std::vector < std::vector <bool>>>> boole;
	std::vector<std::string> moeglichkeiten = {
		"Player vs Player\n",
		"Single Player(random placement von schiffen mit highscore)\n",
		"Player vs Computer\n",
		"Computer vs Computer\n" 
	};
	std::vector<std::string> mapp = {
		"Eigene Karte                                                 ",
		"  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |                  ",
		"---------------------------------------------                ",
		"A | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | A                ",
		"---------------------------------------------                ",
		"B | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | B                ",
		"---------------------------------------------                ",
		"C | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | C                ",
		"---------------------------------------------                ",
		"D | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | D                ",
		"---------------------------------------------                ",
		"E | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | E                ",
		"---------------------------------------------                ",
		"F | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | F                ",
		"---------------------------------------------                ",
		"G | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | G                ",
		"---------------------------------------------                ",
		"H | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | H                ",
		"---------------------------------------------                ",
		"I | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | I                ",
		"---------------------------------------------                ",
		"J | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | J                ",
		"---------------------------------------------                ",
		"  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |                  "
	};
	std::string map1 = "                ";
	std::vector<std::string> mapp2 = {
		"Gegner Karte                                                 ",
		"  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |                  ",
		"---------------------------------------------                ",
		"A | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | A                ",
		"---------------------------------------------                ",
		"B | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | B                ",
		"---------------------------------------------                ",
		"C | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | C                ",
		"---------------------------------------------                ",
		"D | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | D                ",
		"---------------------------------------------                ",
		"E | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | E                ",
		"---------------------------------------------                ",
		"F | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | F                ",
		"---------------------------------------------                ",
		"G | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | G                ",
		"---------------------------------------------                ",
		"H | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | H                ",
		"---------------------------------------------                ",
		"I | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | I                ",
		"---------------------------------------------                ",
		"J | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | ~ | J                ",
		"---------------------------------------------                ",
		"  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |                  "
	};
	std::vector<std::string> mapp3 = {
		"                                ",
		"Legende:                        ",
		"                                ",
		"~ = noch nicht getestetes Wasser",
		"                                ",
		"* = Treffer                     ",
		"                                ",
		"# = Schiff                      ",
		"                                ",
		"o = verfehlt                    ",
		"                                ",
		"X = Schiff Kaputt               ",
		"                                ",
		"Anzahl Schiffe uebrig:          ",
		"                                ",
		"Player 1:       Player2:        ",
		"                                ",
		"#### : 1        #### : 1        ",
		"###  : 2        ###  : 2        ",
		"##   : 3        ##   : 3        ",
		"#    : 4        #    : 4        ",
		"                                ",
		"                                ",
		"                                ",
	};

	std::vector<std::string> mappp = {
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"                                     ",
		"                                     ",
		"                                     ",
		"                                     ",
		"                                     ",
		"                                     ",
	};
	std::vector<std::string> emptyvec = {
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		""
	};
	std::vector<std::vector<char*>> charptrs = {
		{&mapp[3][4],&mapp[3][8],&mapp[3][12],&mapp[3][16],&mapp[3][20], &mapp[3][24], &mapp[3][28], &mapp[3][32], &mapp[3][36], &mapp[3][40]},
		{&mapp[5][4],&mapp[5][8],&mapp[5][12],&mapp[5][16],&mapp[5][20], &mapp[5][24], &mapp[5][28], &mapp[5][32], &mapp[5][36], &mapp[5][40]},
		{&mapp[7][4],&mapp[7][8],&mapp[7][12],&mapp[7][16],&mapp[7][20], &mapp[7][24], &mapp[7][28], &mapp[7][32], &mapp[7][36], &mapp[7][40]},
		{&mapp[9][4],&mapp[9][8],&mapp[9][12],&mapp[9][16],&mapp[9][20], &mapp[9][24], &mapp[9][28], &mapp[9][32], &mapp[9][36], &mapp[9][40]},
		{&mapp[11][4],&mapp[11][8],&mapp[11][12],&mapp[11][16],&mapp[11][20], &mapp[11][24], &mapp[11][28], &mapp[11][32], &mapp[11][36], &mapp[11][40]},
		{&mapp[13][4],&mapp[13][8],&mapp[13][12],&mapp[13][16],&mapp[13][20], &mapp[13][24], &mapp[13][28], &mapp[13][32], &mapp[13][36], &mapp[13][40]},
		{&mapp[15][4],&mapp[15][8],&mapp[15][12],&mapp[15][16],&mapp[15][20], &mapp[15][24], &mapp[15][28], &mapp[15][32], &mapp[15][36], &mapp[15][40]},
		{&mapp[17][4],&mapp[17][8],&mapp[17][12],&mapp[17][16],&mapp[17][20], &mapp[17][24], &mapp[17][28], &mapp[17][32], &mapp[17][36], &mapp[17][40]},
		{&mapp[19][4],&mapp[19][8],&mapp[19][12],&mapp[19][16],&mapp[19][20], &mapp[19][24], &mapp[19][28], &mapp[19][32], &mapp[19][36], &mapp[19][40]},
		{&mapp[21][4],&mapp[21][8],&mapp[21][12],&mapp[21][16],&mapp[21][20], &mapp[21][24], &mapp[21][28], &mapp[21][32], &mapp[21][36], &mapp[21][40]},
	};
	std::vector<std::vector<char*>> charptrs2 = { 
		{&mapp2[3][4],&mapp2[3][8],&mapp2[3][12],&mapp2[3][16],&mapp2[3][20], &mapp2[3][24], &mapp2[3][28], &mapp2[3][32], &mapp2[3][36], &mapp2[3][40]},
		{&mapp2[5][4],&mapp2[5][8],&mapp2[5][12],&mapp2[5][16],&mapp2[5][20], &mapp2[5][24], &mapp2[5][28], &mapp2[5][32], &mapp2[5][36], &mapp2[5][40]},
		{&mapp2[7][4],&mapp2[7][8],&mapp2[7][12],&mapp2[7][16],&mapp2[7][20], &mapp2[7][24], &mapp2[7][28], &mapp2[7][32], &mapp2[7][36], &mapp2[7][40]},
		{&mapp2[9][4],&mapp2[9][8],&mapp2[9][12],&mapp2[9][16],&mapp2[9][20], &mapp2[9][24], &mapp2[9][28], &mapp2[9][32], &mapp2[9][36], &mapp2[9][40]},
		{&mapp2[11][4],&mapp2[11][8],&mapp2[11][12],&mapp2[11][16],&mapp2[11][20], &mapp2[11][24], &mapp2[11][28], &mapp2[11][32], &mapp2[11][36], &mapp2[11][40]},
		{&mapp2[13][4],&mapp2[13][8],&mapp2[13][12],&mapp2[13][16],&mapp2[13][20], &mapp2[13][24], &mapp2[13][28], &mapp2[13][32], &mapp2[13][36], &mapp2[13][40]},
		{&mapp2[15][4],&mapp2[15][8],&mapp2[15][12],&mapp2[15][16],&mapp2[15][20], &mapp2[15][24], &mapp2[15][28], &mapp2[15][32], &mapp2[15][36], &mapp2[15][40]},
		{&mapp2[17][4],&mapp2[17][8],&mapp2[17][12],&mapp2[17][16],&mapp2[17][20], &mapp2[17][24], &mapp2[17][28], &mapp2[17][32], &mapp2[17][36], &mapp2[17][40]},
		{&mapp2[19][4],&mapp2[19][8],&mapp2[19][12],&mapp2[19][16],&mapp2[19][20], &mapp2[19][24], &mapp2[19][28], &mapp2[19][32], &mapp2[19][36], &mapp2[19][40]},
		{&mapp2[21][4],&mapp2[21][8],&mapp2[21][12],&mapp2[21][16],&mapp2[21][20], &mapp2[21][24], &mapp2[21][28], &mapp2[21][32], &mapp2[21][36], &mapp2[21][40]},
	};
	std::vector<std::vector<char*>> charptrs3 = {
		{&mapp3[17][7],&mapp3[17][23]},
		{&mapp3[18][7],&mapp3[18][23]},
		{&mapp3[19][7],&mapp3[19][23]},
		{&mapp3[20][7],&mapp3[20][23]}
	};
	//{22, 3}
	std::string nthing = " ";
	std::string importante = "";
	// 1. 16
	// 2. 16
	bool game_end = 0;
	friend class Computer;
	friend class Player;
	friend class Compare;
public:
	// 21
	std::vector<WORD> colors3 = {unusedc,hitc,shipc,missedc,hitc};
	std::vector<COORD> coords3 = { { 138 ,3},{138 ,5},{138 ,7},{138 ,9},{138, 11} };
	std::vector<std::vector<COORD>> coords = {
	{{20,3},{24,3},{28,3},{32,3},{36,3},{40,3},{44,3},{48,3},{52,3},{56,3}},
	{{20,5},{24,5},{28,5},{32,5},{36,5},{40,5},{44,5},{48,5},{52,5},{56,5}},
	{{20,7},{24,7},{28,7},{32,7},{36,7},{40,7},{44,7},{48,7},{52,7},{56,7}},
	{{20,9},{24,9},{28,9},{32,9},{36,9},{40,9},{44,9},{48,9},{52,9},{56,9}},
	{{20,11},{24,11},{28,11},{32,11},{36,11},{40,11},{44,11},{48,11},{52,11},{56,11}},
	{{20,13},{24,13},{28,13},{32,13},{36,13},{40,13},{44,13},{48,13},{52,13},{56,13}},
	{{20,15},{24,15},{28,15},{32,15},{36,15},{40,15},{44,15},{48,15},{52,15},{56,15}},
	{{20,17},{24,17},{28,17},{32,17},{36,17},{40,17},{44,17},{48,17},{52,17},{56,17}},
	{{20,19},{24,19},{28,19},{32,19},{36,19},{40,19},{44,19},{48,19},{52,19},{56,19}},
	{{20,21},{24,21},{28,21},{32,21},{36,21},{40,21},{44,21},{48,21},{52,21},{56,21}}
	};
	std::vector<std::vector<WORD>> colors = std::vector<std::vector<WORD>>(10, std::vector<WORD>(10, 7));
	std::vector<std::vector<WORD>> colors2 = std::vector<std::vector<WORD>>(10, std::vector<WORD>(10, 7));
	std::vector<std::vector<COORD>> coords2 = {
	{{81,3},{85,3},{89,3},{93,3},{97,3},{101,3},{105,3},{109,3},{113,3},{117,3}},
	{{81,5},{85,5},{89,5},{93,5},{97,5},{101,5},{105,5},{109,5},{113,5},{117,5}},
	{{81,7},{85,7},{89,7},{93,7},{97,7},{101,7},{105,7},{109,7},{113,7},{117,7}},
	{{81,9},{85,9},{89,9},{93,9},{97,9},{101,9},{105,9},{109,9},{113,9},{117,9}},
	{{81,11},{85,11},{89,11},{93,11},{97,11},{101,11},{105,11},{109,11},{113,11},{117,11}},
	{{81,13},{85,13},{89,13},{93,13},{97,13},{101,13},{105,13},{109,13},{113,13},{117,13}},
	{{81,15},{85,15},{89,15},{93,15},{97,15},{101,15},{105,15},{109,15},{113,15},{117,15}},
	{{81,17},{85,17},{89,17},{93,17},{97,17},{101,17},{105,17},{109,17},{113,17},{117,17}},
	{{81,19},{85,19},{89,19},{93,19},{97,19},{101,19},{105,19},{109,19},{113,19},{117,19}},
	{{81,21},{85,21},{89,21},{93,21},{97,21},{101,21},{105,21},{109,21},{113,21},{117,21}}
	};
	//void setmap(std::string&, HANDLE&);
//#if defined(_WIN32) || defined(_WIN64)
	void drawMap(HANDLE&, int, std::vector<std::string>&,bool);
	void drawPvP(HANDLE&, Draw&);
	void drawPv(HANDLE&, Draw&);
	void drawPvC(HANDLE&, Draw&);
	void drawCvC(HANDLE&, Draw&);
	void setmap(HANDLE&, std::vector<std::string>&, std::vector<std::string>&, std::vector<std::string>&, std::vector<std::string>&, std::string&);
	void cursPosSet(HANDLE&, int, int, COORD&);
	template<typename _T, typename __T>
	void setmakedrawmap(HANDLE&, std::vector<std::string>&, std::string&, _T&, __T&, bool, bool, int ,bool);
	void setansig(std::string&);	
	void makemap (std::vector<std::vector<bool>>&, std::vector<std::vector<bool>>&, std::vector<std::vector<char*>>&, bool, std::vector<std::vector<WORD>>& colors);
	void wahlget(int&, std::string&, int);
	
	
}; 